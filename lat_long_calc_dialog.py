# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LatLongCalcDialog
                                 A QGIS plugin
 This plugins calculates latitude and longitude between decimal derees and DMS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-26
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Maryla Je≈º
        email                : maryla179@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'lat_long_calc_dialog_base.ui'))


class LatLongCalcDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(LatLongCalcDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.spbLatD.valueChanged.connect(self.latDMStoDD)
        self.spbLatM.valueChanged.connect(self.latDMStoDD)
        self.spbLatS.valueChanged.connect(self.latDMStoDD)
        self.cmbLat.currentTextChanged.connect(self.latDMStoDD)
        
        self.spbLngD.valueChanged.connect(self.lngDMStoDD)
        self.spbLngM.valueChanged.connect(self.lngDMStoDD)
        self.spbLngS.valueChanged.connect(self.lngDMStoDD)
        self.cmbLng.currentTextChanged.connect(self.lngDMStoDD)

        self.spbLatDD.editingFinished.connect(self.latDDtoDMS)

        self.spbLngDD.editingFinished.connect(self.lngDDtoDMS)


    # 'i' in the variable name stands for integer
    # 'd' in the variable name stands for double
    # 's' in the variable name stands for string/text
    def latDMStoDD(self):

        iDeg = self.spbLatD.value()
        iMin = self.spbLatM.value()
        dSec = self.spbLatS.value()
        sLat = self.cmbLat.currentText()
        
        dDD = float(iDeg) + iMin/60 + dSec/3600

        # check to see what hemisphere was chosen
        # if it's S (south), then changed decimal degrees (DD)
        #     to negative values
        if sLat == 'S':
            dDD = dDD * -1
        
        self.spbLatDD.setValue(dDD)
        
        
    def lngDMStoDD(self):
        iDeg = self.spbLngD.value()
        iMin = self.spbLngM.value()
        dSec = self.spbLngS.value()
        sLng = self.cmbLng.currentText()
        
        dDD = float(iDeg) + iMin/60 + dSec/3600
        
        if sLng == 'W':
            dDD = dDD * -1
        
        self.spbLngDD.setValue(dDD)


    def latDDtoDMS(self):
        dDD = self.spbLatDD.value()

        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60

        self.spbLatD.setValue(abs(iDeg))
        self.spbLatM.setValue(abs(iMin))
        self.spbLatS.setValue(abs(dSec))

        if dDD < 0:
            self.cmbLat.setCurrentText('S')
        else:
            self.cmbLat.setCurrentText('N')


    def lngDDtoDMS(self):
        dDD = self.spbLngDD.value()

        iDeg = int(dDD)
        dMin = (dDD - iDeg) * 60
        iMin = int(dMin)
        dSec = (dMin - iMin) * 60

        self.spbLngD.setValue(abs(iDeg))
        self.spbLngM.setValue(abs(iMin))
        self.spbLngS.setValue(abs(dSec))

        if dDD < 0:
            self.cmbLng.setCurrentText('W')
        else:
            self.cmbLng.setCurrentText('E')
